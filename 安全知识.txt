一些记忆性内容的精简版。

软件安全
    重要性：软件广泛存在，安全关乎国家安全。100%安全的软件和系统是不存在的
    威胁：软件自身的安全（软件漏洞）、恶意代码、软件侵权
    基本属性：保密性、完整性、可用性 等
软件安全工程：运用系统工程的思想和方法，分析存在的安全漏洞、风险等及效果之间复杂的对应关系，对信息系统的安全性进行分析与评价，以期建立一个有效的安全防御体系，而不是简单的安全产品堆砌
确保软件安全的基本思路：运用系统安全工程的思想，将安全要素嵌人软件开发生命周期的全过程，减少或控制漏洞数量，提高整体安全性

漏洞：与安全相关的设计错误、编码缺陷(Bug)及运行故障等。软件安全体系的建立是以漏洞为核心展开的
    需考虑具体环境：如普通程序不用https不是bug，银行则是
    成因：计算机系统结构、软件趋向大型化、新应用产生之初即缺乏安全性考虑、软件开发者缺乏安全知识
恶意代码：在未被授权的情况下，以破坏软硬件设备、窃取用户信息等目的编制的软件或代码片段。包括计算机病毒（破坏）、蠕虫（自动传播）、木马（伪装成合法、窃取）、后门（隐藏、未授权访问）等

SD3+C：安全设计、安全配置（默认安全）、安全部署（提供文档）、沟通（准备漏洞解决方案）

安全需求分析：为了实现软件安全要做的工作
    与普通软件需求的区别：客观性（不从使用者的兴趣出发）、系统性（不只从软件本身出发）、经济适用性（不同等级，不是所有都要采纳）
    来源：遵从性，由专门的安全需求分析人员提出，因为普通用户缺乏知识
    网络等级保护：分为五层，一次对 个人 社会 国家 产生 损害 严重损害 特别严重损害
    获取方法：头脑风暴、问卷调查
        策略分解：将组织需要遵守的内外部政策，包括外部法律法规、隐私和遵从性命令分解成详细的安全需求
        数据分类：根据数据生命周期管理对数据分阶段划分，或根据数据的重要性对保护级别划分
        主/客体关系矩阵：主指角色，客指对象/组件，描述二者之间操作关系的矩阵，如果违背就判定为威胁
    
安全设计：将安全属性设计到软件架构中，转化为可实现的功能组件
    软件架构：根据需求，划分多个层次和模块，从整体到局部。控制软件复杂性、提高软件系统质量、支持软件开发和复用
    原则
        减小受攻击面：用户或其他程序及潜在的攻击者都能够访问到的所有功能和代码的总和。解决：禁止一切不需要使用的模块、协议和服务
        最小授权原则：系统仅授予实体完成规定任务所必需的最小权限，且该持续时间也尽可能短。将超级用户的权限划分为一组细粒度的权限。高内聚低耦合的模块化编程
        权限分离：将软件功能设计为需要在两个或更多条件下才能实现
    安全模式：通用解决方案，使得不具备专业安全知识的应用开发人员也可以使用安全措施
    威胁建模：用抽象概念模型，系统地识别和评价威胁。设计（生成）、开发、测试（用例）、运维（配置）

安全编码：选择安全的编程语言、版本管理、安全编译、代码检测、分析、评审
    安全编译：用最新的IDE、安全编译选项和机制。在一个安全的环境中进行
    安全编码原则：验证输入、留意编译器警告、保持简单性、默认拒绝、最小权限原则
    C：缓冲区溢出。JAVA：语言层（private）、字节码层用类加载器、安全管理器

SQL注入
    利用现有Web程序，将恶意的数据插入SQL查询中，提交到后台数据库引擎执行非授权操作。广泛性、原理简单、防范困难
    防范：采用强类型语言、避免动态拼接、服务端对用户输入进行过滤、避免网站显示SQL错误信息、使用漏洞扫描工具
    盲注：sql语句执行后select的数据不回显到前端页面

自由：运行、研究、重新发布、改进和发布。比开源更严格

软件知识产权法律保护：计算机软件保护条例、专利法、商标法、商业秘密所有权保护
    权利：署名权、修改权、复制权、发表权
    侵权：未经软件著作权人许可，发表、登记、修改、翻译、复制其软件。故意避开或破坏著作权人为保护其软件著作权而采取的技术措施
    版权保护目标：盗版、逆向、信息泄露
